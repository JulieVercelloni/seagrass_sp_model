---
title: "Seagrass spatio-temporal modelling"
subtitle: "Eastern Banks in the Moreton Bay"
author:
  - name: Julie Vercelloni
    corresponding: true
    email: j.vercelloni@aims.gov.au
  - name: Nicholas Hammerman
    email: n.hammerman@uq.edu.au
engine: knitr
format:
  html:
   # toc: true
  #  toc-location: left
    title-block-banner: true
    toc-depth: 3
    highlight-style: atom-one
    embed-resources: true
    theme:
      light: flatly
      dark: darkly
    code-overflow: wrap
    code-fold: true
    number-sections: true
    number-depth: 2
    shift-heading-level-by: -1
    crossref:
      lst-title: Code listing
    fig-align: center
    text-align: center
    acm-html: default
# css: styles.css
execute: 
  message: false
  warning: false
  cache: false
editor:
  markdown:
    wrap: 72
---

```{r, chunkOpts, echo = FALSE}
knitr::opts_chunk$set(cache = TRUE)
#knitr::opts_knit$set(root.dir = "..")
```
```{r}
#| include: true
#| echo: false
#| eval: true

rm(list=ls())

# Source packages and functions 
path <- "../"
source(paste0(path,"R/packages.R"))
source(paste0(path,"R/functions.R"))

# Assign figure path
assign("FIGURES_PATH", paste0(path,"figures/"), envir = .GlobalEnv)
```

### Exploratory Data Analysis {.unnumbered}

```{r}
#| include: true
#| echo: true
#| eval: true

# Read the data 
dat <- read.csv(paste0(path,"data/compiled_cleaned_data_long.csv"))
# Get duplicated rows 
dat_dup <- slice_duplicates(dat)
# If image duplicates, keep only one 
if (nrow(dat_dup)>0){
dat <- clean_data(dat)
} else{
dat <- dat 
}

```

#### Temporal dimension 

The dataset includes `r length(sort(unique(dat$year)))` years of observations. Observations from 2007 and parts of 2011 were removed for the analyse. 

```{r}
#| echo: false
#| eval: true
date_unique <- dat |> 
  group_by(date) |>
  filter(row_number() == 1)

date_unique$date <- as.Date(date_unique$date)
years <- format(date_unique$date, "%Y")
year_counts <- table(years)

yrs_month_to_rm <- c("2011-03", "2011-04", "2011-09")

dat <- dat |>
  filter(!year == "2007") |>
  filter(!year_month %in% yrs_month_to_rm)
```

```{r}
#| label: tbl-mod
#| eval: true
#| echo: false
#| tbl-cap: Number of surveys per year. 
knitr::kable(year_counts)
```


::: {.callout-important}

```{r}
#| include: true
#| echo: true
#| eval: true
missing_coord <- dat |>
  group_by(image_name) |>
  filter(row_number() == 1) |> 
  filter(is.na(Longitude) | is.na(Latitude)) 
  
missing_coord_tal <- missing_coord  |>
  group_by(image_name) |>
  filter(row_number() == 1) |>
  group_by(year) |>
  count()
```

**`r nrow(missing_coord)` images are recorded without coordinates. @tbl-miss shows that most of these images were taken in 2013. These images are removed for the analysis.** 

```{r}
#| label: tbl-miss
#| echo: false
#| eval: true
#| tbl-cap: Number of missing coordinates per year.
kable(missing_coord_tal)
```
:::


### Interactive map {.unnumbered} 

```{r}
#| echo: false
#| eval: true
dat_plot <- dat |> 
  filter(!is.na(Longitude) | !is.na(Latitude)) |>
  group_by(image_name) |>
  filter(row_number() == 1)
```

```{r}
#| echo: true
#| eval: true
my_colors <- colorRampPalette(wes_palette("AsteroidCity1", 5, type = "discrete"))(length(unique(dat_plot$year)))
pal <- colorFactor(my_colors, domain = dat_plot$year)

map_year <-  leaflet(option=leafletOptions(zoomControl = FALSE))%>% 
  addProviderTiles("Esri.WorldStreetMap", group = "Streetmap") %>% 
  addProviderTiles("Esri.WorldImagery", group = "terrain") %>%
  addCircleMarkers(data=dat_plot,lng = ~Longitude, lat = ~Latitude, 
                   popup = ~date, radius=5,
                   stroke = FALSE, fillOpacity = 0.8,
                   color = ~pal(year)) %>% 
  addLegend(data=dat_plot,position = "topright", pal = pal, 
            values = ~dat_plot$year,
            title = "Year",
            opacity = .9) %>%
  addMiniMap(position = "topleft", width = 170,
             height = 150) 

saveWidget(map_year, file= paste0(FIGURES_PATH,"image_location.html"))
```
See **image_location.html** in the figure folder. 

### Data clustering {.unnumbered} 

A hierarchical clustering analysis was performed to identify areas of interest where images from different surveyed years overlap. Different aggregation distances were tested to determine the optimal reef area, balancing ecological relevance and the number of images per year.


```{r}
#| echo: false
#| eval: true

dat_cut <- dat |>
  group_by(image_name) |>
  filter(row_number() == 1) |>
  dplyr::select(-category_name) |> 
  filter(!is.na(Longitude) | !is.na(Latitude)) |>
  data.frame()

# transform in utm coordinates 
dat_full_utm <- dat_cut %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = st_crs(4326)) %>%
  st_transform(crs = "+proj=utm +zone=56 +south +datum=WGS84") %>%
  dplyr::select(year, bank, image_name) %>%
  mutate(UTMX = st_coordinates(.)[,1],
         UTMY  = st_coordinates(.)[,2]) %>%
  st_drop_geometry() %>%
  dplyr::arrange(bank)

tree_loc <- dat_full_utm %>%
  dplyr::select(bank, UTMX, UTMY) %>%
  split(.$bank) 

# Clustering
clust_list <-
  tree_loc %>%
  map(.f = function(x){
    dist(x[,c("UTMX","UTMY")])
  }) %>%
  map(.f=hclust)

s_split <- unique(dat_full_utm$bank)

cut.tree.list <- vector("list", length(s_split))

for (i in 1:length(s_split)){
  cut.tree.list[[i]] <-   filter(dat_full_utm, bank == s_split[i] ) %>%
     mutate("10" = cutree( clust_list[[i]], h=5)) %>%
    mutate("50" = cutree( clust_list[[i]], h=25)) %>%
    mutate("70" = cutree( clust_list[[i]], h=35)) %>%
    mutate("100" = cutree( clust_list[[i]], h=50)) %>%
    mutate("150" = cutree( clust_list[[i]], h=75)) %>%
    mutate("200" = cutree( clust_list[[i]], h=100)) %>%
    mutate("300" = cutree( clust_list[[i]], h=150)) %>%
    gather(key = aggregation_distance, value = group,
           6:12)
}

# Make table
cut.tree.collapsed <- do.call(what = rbind, args = cut.tree.list) %>%
  mutate(splitting.var = interaction(bank, aggregation_distance, group, drop=T)) 

## Keep groups with more than 3 images per year per group 

dat_clean1 <-cut.tree.collapsed |> 
  group_by(splitting.var,year) |> 
  nest() |>
  mutate(m = map(data, function(d) nrow(d))) |>
  filter(!m<3)%>%dplyr::select(year,splitting.var) |> 
  inner_join(cut.tree.collapsed) |>
  dplyr::arrange(aggregation_distance,group) |>
  data.frame()

## At least 2 replicate through time
dat_clean <- dat_clean1 |>
  group_by(splitting.var) |> 
  mutate(m2=length(unique(year))) |> 
  filter(!m2<3) |>
  dplyr::select(splitting.var) |>
  distinct() |>
  inner_join(dat_clean1) |>
  dplyr::arrange(aggregation_distance,group) |>
  data.frame() |>
  droplevels()

dat_tally <- dat_clean |> group_by(splitting.var, year) |> tally()
wrong_group <- names(which(table(dat_tally$splitting.var)<=1)) # this should be empty 
```

```{r}
#| echo: false
#| eval: true
#| cache: false 

# Summarize 

dat_clean$aggregation_distance <- as.factor(dat_clean$aggregation_distance)

dat_clean_tal <- dat_clean |> 
  group_by(splitting.var,year, aggregation_distance) |> 
  nest() |>
  dplyr::select(-data) |>
  group_by(year, aggregation_distance) |>
  tally() |>
 mutate(aggregation_distance = factor(aggregation_distance, levels = c("10", "50", "70", "100", "150","200", "300"))) |>
 dplyr::arrange(aggregation_distance)

my_colors <- colorRampPalette(wes_palette("GrandBudapest2", 4, type = "discrete"))(length(unique(dat_clean_tal$aggregation_distance)))

p11 <- ggplot(dat_clean_tal, aes(x = as.factor(year), y = n, fill =    aggregation_distance)) + 
  geom_bar(stat = "identity", position = position_dodge(width = .8), alpha = .7, col = "black") + 
  theme_bw() + ylab("Number of sub-transects (repeated)")  + 
  xlab("year") +
  theme(legend.position = "bottom",
        strip.background =element_rect(fill="gray95")) +
  scale_fill_manual("Aggregation distance", values  = my_colors)

# Number of replicated year per aggregation_distance 

dat_clean_tal2 <- dat_clean |>
  group_by(splitting.var, year, aggregation_distance) |>
  tally() |>
  ungroup() |>
  dplyr::select(-n) |>
  group_by(splitting.var, aggregation_distance) |>
  tally() |>
 mutate(aggregation_distance = factor(aggregation_distance, levels = c("10", "50", "70", "100", "150","200", "300"))) |>
 dplyr::arrange(aggregation_distance)

p2 <- ggplot(dat_clean_tal2, aes(x= aggregation_distance, y = n, fill = aggregation_distance)) + geom_boxplot() + 
  theme_bw() + ylab("Number of replicated years")  + 
  xlab("") +
  theme(legend.position = "none",
        strip.background =element_rect(fill="gray95"),
        axis.text.x = element_blank()) +
  scale_fill_manual("Aggregation distance", values  = my_colors)

# Number of sub-sites per aggregation_distance

dat_clean_tal3 <- dat_clean |> 
  group_by(splitting.var, aggregation_distance) |> 
  nest() |>
  dplyr::select(-data) |>
  group_by(aggregation_distance) |>
  tally() |>
 mutate(aggregation_distance = factor(aggregation_distance, levels = c("10", "50", "70", "100", "150","200", "300"))) |>
 dplyr::arrange(aggregation_distance)


p3 <- ggplot(dat_clean_tal3, aes(x= aggregation_distance, y = n, fill = aggregation_distance)) + geom_bar(stat = "identity", col = "black") + 
  theme_bw() + ylab("Number of unique sub-transects")  + 
  xlab("") +
  theme(legend.position = "none",
        strip.background =element_rect(fill="gray95"),
        axis.text.x = element_blank()) +
  scale_fill_manual("Aggregation distance", values  = my_colors)

pfig <- (p3 | p2) / p11 + plot_annotation(tag_levels = 'A')
```

```{r}
#| echo: false
#| eval: true
#| cache: false 

# Select aggregation distance and explore multiple year observations 
dat_st <- dat_clean |>
 filter(aggregation_distance == "150") |>
 inner_join(dat) |>
 dplyr::select(splitting.var, year, bank, transect, year_month, Longitude,
               Latitude, image_name, category_name, value)

tt <- dat_st |> group_by(splitting.var, year, year_month) |>
            count() |>
            group_by(splitting.var, year) |>
            count() |>
            filter(n >1)
     
tt1 <- dat_st |>
 inner_join(tt %>% dplyr::select(.,-n)) |>
 group_by(splitting.var, year, year_month, image_name) |>
        count() |>
 group_by(splitting.var, year, year_month) |>
        count() 

multi_tal <- tt1 |>
group_by(splitting.var, year) |>
count() |>
group_by(year) |>
count() 

total_tal <- dat_st |> group_by(splitting.var, year) |>
            count() |>
            group_by(year) |>
            count() |>
            rename(n_total = n)

multi_tal <- inner_join(multi_tal,total_tal) |>
             mutate(`%` = round(n / n_total,3)*100)


```{r}
#| echo: false
#| eval: true
#| cache: false 

# Prepare the data for modelling  

# Keep the last survey for years with seasonal observations 
index_keep <- tt1 |>
     group_by(splitting.var, year) |>
     filter(row_number()== n()) |>
     dplyr::select(-n)

index_all <- dat_st |>
  group_by(splitting.var, year, year_month) |>
  count() |>
  dplyr::select(-n) 
  
index_clean <- index_all|>
 anti_join(index_keep |> dplyr::select(-year_month)) |>
 rbind(index_keep)

# Get dat_st with a unique observation per year  
dat_st <- dat_st |>
 inner_join(index_clean)

# Get centroid of sub-transect
dat_cent <- dat_st %>%
 st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
 group_by(splitting.var) %>%
 summarise(geometry = st_centroid(st_union(geometry)), .groups = "drop") %>%
 mutate(longitude = st_coordinates(.)[,1],
        latitude = st_coordinates(.)[,2]) %>%
  st_drop_geometry() 

# Summarize cover as COUNT at sub-transect level and add centroids 
dat_ready <- dat_st |>
 group_by(category_name, year, splitting.var) |>
 mutate(COUNT_img = value/2) |>
 summarize(COUNT = sum(COUNT_img), 
           nbre_img = n(),
           TOTAL = nbre_img *50) |>
 data.frame() |> 
 inner_join(dat_st |> group_by(splitting.var) |> filter(row_number() == 1) |>
            dplyr::select(splitting.var, year_month, bank)) |>
  inner_join(dat_cent) |>
  filter(!bank == "CH")

# Add season associated with observations 
dat_ready <- dat_ready |>
  mutate(month = as.numeric(str_extract(year_month, "(?<=-)\\d{2}"))) |>
  mutate(season = case_when(
           month %in% c(12, 01, 02) ~ "Summer",
           month %in% c(03, 04, 05)  ~ "Autumn",
           month %in% c(06, 07, 08)  ~ "Winter",
           month %in% c(09, 10, 11) ~ "Spring"
         )) |>
  select(-month) 

# Keep the two species of seagrass of interest 

sp_to_keep <- c("Zostera.muelleri", "Cymodocea.serrulata")

# Bank scale 
dat_sp_sum <- dat_ready |> filter(category_name %in% sp_to_keep) |>
              mutate(cover = (COUNT / TOTAL)*100) |>
              group_by(category_name, bank, year) |>
              summarize(mean = mean(cover), sd_mean = sd(cover), n = n()) |>
              mutate(SE = sd_mean / sqrt(n)) 

p1 <- ggplot(dat_sp_sum, aes(x = year, y = mean, col = category_name, group = category_name)) + 
 geom_point(size=3.8,alpha=.3) + geom_line(linetype="dashed")+
  geom_errorbar(aes(ymin=mean-2*SE, ymax=mean+2*SE,col=category_name), width=.15)+ 
  xlab("Year")+ylab("Coverage (%)") + theme_bw() +
 facet_wrap(~bank) + 
 scale_color_manual("Seagrass", values = c("#006400", "#B38B00")) +
  theme(axis.text.x = element_text(size=13, angle = 90),legend.position="bottom",
        legend.title = element_text(colour = "black", size = 13, face = "bold"), 
        legend.text = element_text(colour = "black", size = 13), 
        axis.text.y = element_text(size=13),axis.title.y=element_text(size=15),axis.title.x=element_text(size=15))+
  scale_x_continuous(breaks=c(2012,2014,2016,2018,2020,2022, 2024)) 

# Sub transect scale 
p2 <- ggplot(dat_ready |> filter(category_name == "Zostera.muelleri"), aes(x = year, y = (COUNT / TOTAL)*100, group = splitting.var)) + 
 geom_line(size = 0.2, col = "#B38B00")+ geom_jitter(width = 0.2, height = 0.5, size=2.8,alpha=.3) + 
  xlab("Year")+ylab("Coverage (%)") + theme_bw() +
 facet_wrap(~bank) + 
  ggtitle("Zostera.muelleri")+
  theme(axis.text.x = element_text(size=13, angle = 90),legend.position="bottom",
        legend.title = element_text(colour = "black", size = 13, face = "bold"), 
        legend.text = element_text(colour = "black", size = 13), 
        axis.text.y = element_text(size=13),axis.title.y=element_text(size=15),axis.title.x=element_text(size=15))+
  scale_x_continuous(breaks=c(2012,2014,2016,2018,2020,2022, 2024)) 

p3 <- ggplot(dat_ready |> filter(category_name == "Cymodocea.serrulata"), aes(x = year, y = (COUNT / TOTAL)*100, group = splitting.var)) + 
 geom_line(size = 0.2, col = "#006400")+ geom_jitter(width = 0.2, height = 0.5, size=2.8,alpha=.3) + 
  xlab("Year")+ylab("Coverage (%)") + theme_bw() +
 facet_wrap(~bank) + 
  ggtitle("Cymodocea.serrulata")+
  theme(axis.text.x = element_text(size=13, angle = 90),legend.position="bottom",
        legend.title = element_text(colour = "black", size = 13, face = "bold"), 
        legend.text = element_text(colour = "black", size = 13), 
        axis.text.y = element_text(size=13),axis.title.y=element_text(size=15),axis.title.x=element_text(size=15))+
  scale_x_continuous(breaks=c(2012,2014,2016,2018,2020,2022, 2024)) 
```
::: {.callout-tip}
## Results

### Aggregation distance
The aggregation distances of 150 results in a good balance between spatial (number of sub-transects) and temporal (number of replicated years) resolution (@fig-clust A & B). Data are aggregated at this spatial scale to create sub-transect observations. 

```{r, fig.height = 8, fig.width = 7}
#| label: fig-clust
#| eval: true
#| echo: false
#| fig-cap: Results from the hierarchical clustering. 
pfig
```

### Seasonal observations 
`r nrow(multi_tal)` years contain seasonal observations with two surveys per year. @tbl-multi summarizes the percentage of sub-transects with seasonal observations. @tbl-tota shows the number of sub-transects per year. Due to the low number of seasonal observations, the last surveys per year is kept for the modelling being considered to be representative of the associated year. Note that the year 2014 contains 2 surveys but their locations didn't overlap.        

```{r}
#| label: tbl-multi
#| echo: false
#| eval: true
#| tbl-cap: Number of sub-transects and associated percentage with seasonal observations.
kable(multi_tal)
```
```{r}
#| label: tbl-tota
#| echo: false
#| eval: true
#| tbl-cap: Number of sub-transects per survyed year.
kable(total_tal)
```

### Sub-transect data 
A total `r length(unique(dat_ready$splitting.var))` sub-transects are created across the banks. The number of sub-transects vary from 66 for WA to 192 for MO. Sub-transects are in averaged resurveyed 4.8 times (1.45 SD) with a minimum of 3 times and a maximum of 8 times. 

An average of 14.6 images (11.4 SD) are aggregated per sub-transect with a minimum of minimum of 3 images and maximum of 125 images.  

```{r, fig.height = 6, fig.width = 7}
#| label: fig-sea
#| eval: true
#| echo: false
#| fig-cap: Dynamics of the two seagrass species at the bank level. Dots show mean cover and error bars standard errors. 
p1
```

```{r, fig.height = 8, fig.width = 10}
#| label: fig-seasub
#| eval: true
#| echo: false
#| fig-cap: Dynamics of the two seagrass species. Dots show cover at sub-transect level. 
p2 + p3
```

```{r}
#| label: tbl-season
#| echo: false
#| eval: true
#| tbl-season: Seasonal observations.
table(dat_ready$season) / nrow(dat_ready) *100
```
:::


::: {.callout-caution}
## TO DO list

* find a better location for the github repo (NH) 
* check shapefile of banks (JV)
* develop the model (JV)
* get ereefs data in the raster format (NH) 
:::